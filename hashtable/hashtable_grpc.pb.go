// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: hashtable/hashtable.proto

package hashtable

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashTableClient is the client API for HashTable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashTableClient interface {
	Add(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*Code, error)
	Del(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Code, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error)
	Dump(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HashTable_DumpClient, error)
}

type hashTableClient struct {
	cc grpc.ClientConnInterface
}

func NewHashTableClient(cc grpc.ClientConnInterface) HashTableClient {
	return &hashTableClient{cc}
}

func (c *hashTableClient) Add(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*Code, error) {
	out := new(Code)
	err := c.cc.Invoke(ctx, "/hashtable.HashTable/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashTableClient) Del(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Code, error) {
	out := new(Code)
	err := c.cc.Invoke(ctx, "/hashtable.HashTable/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashTableClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error) {
	out := new(Val)
	err := c.cc.Invoke(ctx, "/hashtable.HashTable/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashTableClient) Dump(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HashTable_DumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &HashTable_ServiceDesc.Streams[0], "/hashtable.HashTable/Dump", opts...)
	if err != nil {
		return nil, err
	}
	x := &hashTableDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HashTable_DumpClient interface {
	Recv() (*KeyVal, error)
	grpc.ClientStream
}

type hashTableDumpClient struct {
	grpc.ClientStream
}

func (x *hashTableDumpClient) Recv() (*KeyVal, error) {
	m := new(KeyVal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HashTableServer is the server API for HashTable service.
// All implementations must embed UnimplementedHashTableServer
// for forward compatibility
type HashTableServer interface {
	Add(context.Context, *KeyVal) (*Code, error)
	Del(context.Context, *Key) (*Code, error)
	Get(context.Context, *Key) (*Val, error)
	Dump(*Empty, HashTable_DumpServer) error
	mustEmbedUnimplementedHashTableServer()
}

// UnimplementedHashTableServer must be embedded to have forward compatible implementations.
type UnimplementedHashTableServer struct {
}

func (UnimplementedHashTableServer) Add(context.Context, *KeyVal) (*Code, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedHashTableServer) Del(context.Context, *Key) (*Code, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedHashTableServer) Get(context.Context, *Key) (*Val, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHashTableServer) Dump(*Empty, HashTable_DumpServer) error {
	return status.Errorf(codes.Unimplemented, "method Dump not implemented")
}
func (UnimplementedHashTableServer) mustEmbedUnimplementedHashTableServer() {}

// UnsafeHashTableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashTableServer will
// result in compilation errors.
type UnsafeHashTableServer interface {
	mustEmbedUnimplementedHashTableServer()
}

func RegisterHashTableServer(s grpc.ServiceRegistrar, srv HashTableServer) {
	s.RegisterService(&HashTable_ServiceDesc, srv)
}

func _HashTable_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashTableServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashtable.HashTable/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashTableServer).Add(ctx, req.(*KeyVal))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashTable_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashTableServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashtable.HashTable/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashTableServer).Del(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashTable_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashTableServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashtable.HashTable/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashTableServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashTable_Dump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HashTableServer).Dump(m, &hashTableDumpServer{stream})
}

type HashTable_DumpServer interface {
	Send(*KeyVal) error
	grpc.ServerStream
}

type hashTableDumpServer struct {
	grpc.ServerStream
}

func (x *hashTableDumpServer) Send(m *KeyVal) error {
	return x.ServerStream.SendMsg(m)
}

// HashTable_ServiceDesc is the grpc.ServiceDesc for HashTable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashTable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashtable.HashTable",
	HandlerType: (*HashTableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _HashTable_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _HashTable_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HashTable_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dump",
			Handler:       _HashTable_Dump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hashtable/hashtable.proto",
}
